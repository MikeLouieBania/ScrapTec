<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" /> 

    <link rel="stylesheet" href="https://unpkg.com/leaflet-geosearch/dist/geosearch.css" />

    <link rel="stylesheet" href="https://unpkg.com/leaflet-fullscreen/dist/leaflet.fullscreen.css" /> 
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.fullscreen/1.7.1/Control.FullScreen.css" integrity="sha512-YZftQ7c6e3+weG1OManztsFkA0indiZ6J5eH5lWf3ZtAR2ph5f16Dw2XZnp7NPbM6Dgs2hidkU3GQhpHZS6saQ==" crossorigin="anonymous" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.fullscreen/1.7.1/Control.FullScreen.min.js" integrity="sha512-ypIw7b9g6j+6sA8eMiL5CYmfqDg4x3WfE1zJ0y0XK8zOFf4j2CkC7jHpIaIj07It69UoH6Aq5zF7fIlcRbaP1Q==" crossorigin="anonymous"></script>
    

    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

 

<!-- ROUTING -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css"> 

    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f4f7; /* A light grayish background */
        }
    
        .btn-success {
            background-color: #2ecc71; /* A vibrant green for success actions */
        }
    
        .btn-success:hover {
            background-color: #27ae60;
        }
    
        .alert-warning {
            background-color: #f39c12; /* A vibrant orange for warnings */
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Card Styles */
        .card {
            height: 100%;
            transition: transform 0.2s;
            cursor: pointer;
            border-radius: 10px;
            overflow: hidden;
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            box-shadow: 0px 0px 15px rgba(0,0,0,0.1); /* Shadow for depth */
            transition: transform 0.3s ease; /* Transition for hover effect */
        }
        .card-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .card:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transform: translateY(-5px); /* Small lift effect on hover */   
        }

        .card img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 10px 10px 0 0;
        }

        .card-body {
            padding: 20px; 
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 100%; /* This will ensure all cards within the column will have the same height */
        }

        .card-info {
            display: flex;
            justify-content: space-between;
        } 
        
        .status-icon {
            margin-left: 10px;
            vertical-align: middle;
        }
        
        .status-open {
            color: #2ecc71; /* Vibrant green for open status */
        }
        
        .status-closed {
            color: #e74c3c; /* Vibrant red for closed status */
        }
        .btn {
            margin-top: 10px;
        }
        
        .dashboard-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .dashboard-card {
            height: 100%;
            transition: transform 0.2s;
            cursor: pointer;
            border-radius: 10px;
            overflow: hidden;
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .modal {
            z-index: 1051; /* Ensure it's above other elements including Leaflet controls */
        }

        .modal-map-container {
            height: 400px;
        }
        .leaflet-container {
            max-width: none !important;
            width: 100% !important;
        } 
        
        .leaflet-control-fullscreen {
            z-index: 1001 !important; 
        }

        .btn-enhanced {
            background-color: #34495e; /* A smooth dark blue shade */
            color: #fff; /* White text */
            border-radius: 5px; /* Rounded corners */
            border: none; /* Removing the default border */
            padding: 12px 20px; /* Adjust the padding for a better appearance */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* A subtle shadow for depth */
            transition: transform 0.3s ease, box-shadow 0.3s ease; /* Smooth transition effect for hover */
        }

        .btn-enhanced:hover {
            transform: translateY(-3px); /* Move the button slightly up when hovered */
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2); /* Increase the shadow size on hover */
        }

        .btn-enhanced:focus {
            outline: none; /* Removing the default focus outline */
            box-shadow: 0 0 0 3px rgba(52, 73, 94, 0.3); /* Add a blue glow around the button when it's focused */
        } 
        .modal-map-container {
    margin-bottom: 10px;
}

.btn {
    margin-right: 5px;
    margin-top: 5px;
}

    </style>
</head>

    <body>
        <!-- Navigation Bar -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="/organization/dashboard">Dashboard</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mr-auto">  
                    <li class="nav-item">
                    <a class="nav-link" href="/organization/donationsList">Donations</a>
                    </li>
                    <li class="nav-item">
                    <a class="nav-link" href="/organization/pledgeBasket">Pledge Basket</a>
                    </li>  
                    <li class="nav-item">
                    <a class="nav-link" href="/organization/faq">FAQ</a>
                    </li>
                    <li class="nav-item">
                    <a class="nav-link" href="/organization/account">Account</a>
                    </li>
                </ul> 
                <form class="form-inline my-2 my-lg-0" method="post" action="/organization/logout">
                    <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Logout</button>
                </form>
            </div>
        </nav>


        <div class="dashboard-container mt-4">
            
            <h2>Drop Points</h2>  

            <button type="button" class="btn btn-secondary btn-enhanced mb-3" data-toggle="modal" data-target="#donationGuideModal">
                View Donation Points Guide
            </button>
            
            

            <!-- Modal Structure Starts Here -->
            <div class="modal fade" id="donationGuideModal" tabindex="-1" role="dialog" aria-labelledby="donationGuideModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                    <h5 class="modal-title" id="donationGuideModalLabel">Donation Points Guide</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    </div>
                    <div class="modal-body"> 
                        <div class="container">
                            <div class="jumbotron">
                                <h1>Donation Points Guide</h1>
                                <p class="lead">Earn points with each donation to boost your organization's impact!</p>
                            </div>

                            <div class="accordion" id="pointsAccordion">
                                <!-- Peripheral Types Section -->
                                <div class="card">
                                    <div class="card-header" id="headingOne">
                                    <h2 class="mb-0">
                                        <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        Types of Peripherals
                                        </button>
                                    </h2>
                                    </div>
                                    <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#pointsAccordion">
                                    <div class="card-body">
                                        <ul>
                                        <li><strong>Input Devices:</strong> Includes Mouse and Keyboard. Earn <span class="badge badge-primary">0.5 point per item</span>.</li>
                                        <li><strong>Storage Devices:</strong> HDD, SSD, and Optical Drives fall under this category. <span class="badge badge-primary">1 point per item</span>.</li>
                                        <li><strong>Memory and Processing:</strong> Consists of RAM, Processors, and Motherboards. <span class="badge badge-primary">1.5 points per item</span>.</li>
                                        <li><strong>Graphics and Video:</strong> Graphic Cards, Monitors, and Webcams are part of this category. <span class="badge badge-primary">2 points per item</span>.</li>
                                        <li><strong>Power and Cooling:</strong> Includes Power Supplies and Cooling Fans. <span class="badge badge-primary">1 point per item</span>.</li>
                                        <li><strong>Network and Sound:</strong> Covers Network Cards and Sound Cards. <span class="badge badge-primary">1 point per item</span>.</li>
                                        <li><strong>Whole Systems:</strong> Laptops and Desktops fall under this category. <span class="badge badge-primary">3 points per item</span>.</li>
                                        </ul>            
                                    </div>
                                    </div>
                                </div> 
                                <!-- Condition Section -->
                                <div class="card">
                                    <div class="card-header" id="headingTwo">
                                    <h2 class="mb-0">
                                        <button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                        Condition
                                        </button>
                                    </h2>
                                    </div>
                                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#pointsAccordion">
                                    <div class="card-body">
                                        <ul>
                                        <li>New: <span class="badge badge-success">1 bonus point</span></li>
                                        <li>Used but Working: <span class="badge badge-warning">0.5 bonus points</span></li>
                                        </ul>
                                    </div>
                                    </div>
                                </div>
                                <!-- Quantity Section -->
                                <div class="card">
                                    <div class="card-header" id="headingThree">
                                    <h2 class="mb-0">
                                        <button class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                        Quantity
                                        </button>
                                    </h2>
                                    </div>
                                    <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#pointsAccordion">
                                    <div class="card-body">
                                        <ul>
                                        <li>10 to 49 items: <span class="badge badge-info">3 bonus points</span></li>
                                        <li>50 or more items: <span class="badge badge-info">5 bonus points</span></li>
                                        </ul>
                                    </div>
                                    </div>
                                </div> 
                            </div> 
                            <!-- Penalty Alert -->
                            <div class="alert alert-danger" role="alert">
                                <h4 class="alert-heading">Important:</h4>
                                <p>If the items you donated do not match the claimed information, point deductions may apply. For example, if an item is claimed as 'New' but appears to be 'Used', points will be recalculated accordingly.</p>
                            </div> 
                            <!-- Penalty Details -->
                            <section>
                                <h4>Penalties</h4>
                                <ul>
                                    <li><strong>Incorrect Item Condition:</strong> <span class="badge badge-danger">-1 point per item</span></li>
                                    <li><strong>Incorrect Quantity:</strong> <span class="badge badge-danger">-2 points</span></li>
                                </ul>
                            </section> 
                            <!-- Computation Section -->
                            <section>
                                <h4>Computation Formula</h4>
                                <p>To give you a clear understanding of how points are calculated, here is the formula:</p>
                                <pre>
            <code>
                Total Points = ((Base Points per Item + Condition Bonus per Item) x Quantity) + Quantity Bonus (if applicable)
            </code>
                                </pre>
                                <p>For example:</p>
                                <ul>
                                    <li>If you are donating 5 'Whole Systems' that are 'Used but Working', your points would be calculated as follows: <br> <code>(3 (Base for Whole Systems) + 0.5 (Condition Bonus)) x 5 (Quantity) = 17.5</code></li>
                                    <li>If you are donating 10 'Input Devices' that are 'New', your points would be calculated as follows: <br> <code>(0.5 (Base for Input Devices) + 1 (Condition Bonus)) x 10 (Quantity) + 3 (Quantity Bonus) = 28</code></li>
                                </ul>
                            </section> 
                        </div>
                    </div>
                    <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
                </div>
            </div>
            <!-- Modal Structure Ends Here -->
    

            <!-- Search Bar -->
            <input type="text" id="search" aria-label="Search Drop Points" placeholder="Search Drop Points..." class="form-control mb-3">
    


            <!-- Drop Points rendering using a loop -->
            <div class="row" id="dropPointsContainer">
                <% dropPoints.forEach(point => { %>
                    <div class="col-md-4">
                        <div class="card mb-3"> 
                            <div class="card-body">
                                <h5 class="card-title"><%= point.name %></h5>

                                
                                
                                <p class="drop-point">
                                    <i class="fas fa-sun"></i> <span id="openingTime-<%= point.id %>"><%= point.openingTime %></span>
                                    <span style="margin: 0 20px;">to</span> 
                                    <span id="closingTime-<%= point.id %>"><%= point.closingTime %></span> <i class="fas fa-moon"></i>
                                    
                                    <!-- Placeholder for Status -->
                                    <span class="status" id="status-<%= point.id %>">
                                        <!-- We will populate this with JavaScript later -->
                                    </span>
                                </p>
                                
                                <p><strong>Contact: <br></strong> <%= point.manager ? point.manager.phoneNumber : 'N/A' %></p> <!-- Displaying phone as a representative contact, adjust as needed -->      
                                <p><strong>Email:</strong> <%= point.manager ? point.manager.email : 'N/A' %></p> 
                                <p class="distance-to-user" id="distance-to-user-<%= point.id %>"></p>
                                            
                            </div>               
                
                            
                            <!-- Donate button -->
                            <% if(point.canDonate) { %>
                                <form action="/organization/donationForm" method="POST">
                                    <input type="hidden" name="dropPointId" value="<%= point.id %>">
                                    <button type="submit" class="btn btn-success btn-block">Donate</button>
                                </form> 
                            <% } else { %>
                                <p class="alert alert-warning">You have a pending donation. Please complete it before donating again.</p>
                            <% } %>    
                            
                        </div> 
                        <!-- Details Modal for this particular point -->
                        <div class="modal fade" id="detailsModal-<%= point.id %>" data-point-id="<%= point.id %>" data-location="<%= point.location %>"  data-description="<%= point.description %>">
                            <div class="modal-dialog modal-xl">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h4 class="modal-title"><%= point.name %></h4>
                                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                                    </div>
                                    <div class="modal-body row">
                                        <!-- Left Side -->
                                        <div class="col-md-6">
                                            <p><strong>Location:</strong> <%= point.location %></p>
                                            <p><strong>Description:</strong> <%= point.description %></p> 
                                            <input id="startAddress-<%= point.id %>" type="text" placeholder="Start Address" class="form-control mb-2">
                                            <button onclick="getDirections('<%= point.id %>')" class="btn btn-primary mb-2">Show Directions</button>
                                            <button onclick="getCurrentAddress('<%= point.id %>')" class="btn btn-sm btn-secondary mb-2">Use Current Address</button>
                                            <p id="currentAddress-<%= point.id %>"></p> <!-- Element to display the current address -->
                                            
                                            <% if(point.shouldDisplayFeedbackForm) { %> 
                                                <h5 class="mb-3 text-success">You have verified donations to this drop point! 🎉</h5>
                                                <p>Select a donation to provide feedback:</p>
                                                <select id="donationSelect-<%= point.id %>" class="form-control mb-3">
                                                    <% point.eligibleForFeedback.forEach(donation => { %>
                                                        <option value="<%= donation.id %>">
                                                            Donated:
                                                            <% donation.peripherals.forEach(peripheral => { %>
                                                                Type: <%= peripheral.type %> - Amount: <%= peripheral.quantity %><br>
                                                            <% }); %>
                                                        </option>
                                                    <% }); %>
                                                </select>
                                                <form action="/organization/submit-feedback" method="post">
                                                    <div class="feedback-rating mb-2">
                                                        <label><input type="radio" name="rating" value="5"> ★★★★★</label><br>
                                                        <label><input type="radio" name="rating" value="4"> ★★★★</label><br>
                                                        <label><input type="radio" name="rating" value="3"> ★★★</label><br>
                                                        <label><input type="radio" name="rating" value="2"> ★★</label><br>
                                                        <label><input type="radio" name="rating" value="1"> ★</label>
                                                    </div>
                                                    <textarea placeholder="Write your feedback here..." class="form-control mb-2" name="feedbackText"></textarea>
                                                    <button type="submit" class="btn btn-success mb-2">Submit Feedback</button>
                                                </form>
                                                <!-- Button to view other feedbacks --> 
                                                <button class="btn btn-sm btn-info mt-3" data-toggle="modal" data-target="#feedbackModal-<%= point.id %>">View Other Feedbacks</button>
                                            <% } else { %>
                                                <!-- Button to view other feedbacks --> 
                                                <button class="btn btn-sm btn-info mt-3" data-toggle="modal" data-target="#feedbackModal-<%= point.id %>">View Other Feedbacks</button>
                                            <% } %>
                                            
                                            <!-- Feedback Modal (You can populate this with feedback data) -->
                                            <div class="modal fade" id="feedbackModal-<%= point.id %>">
                                                <div class="modal-dialog">
                                                    <div class="modal-content"> 

                                                    </div>
                                                </div>
                                            </div>
                                            
                                            
                                        </div>
                                        <!-- Right Side - Map Placeholder -->
                                        <div class="col-md-6">
                                            <div class="modal-map-container mb-2" id="map-<%= point.id %>" style="height: 400px;"></div>
                                            <button class="btn btn-sm btn-info refresh-map" data-map-id="map-<%= point.id %>">Refresh Map</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div> 
                    </div>
                <% }); %>
            </div>


        </div> 
        
        
        <!-- Scripts - In Order -->
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

        <!-- Load Leaflet and plugins ONCE and AFTER Bootstrap -->
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <script src="https://unpkg.com/leaflet-geosearch/dist/geosearch.umd.js"></script>
        <script src="https://unpkg.com/leaflet-fullscreen/dist/Leaflet.fullscreen.min.js"></script>
        <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
         
        <script>
            let maps = {};
            let userLocation;
            let dropPointMarkers = {};
            let routeControls = {};
            let currentAddressMarker = {};

            // Define the currentLocationIcon outside the function for global access
            const currentLocationIcon = L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                shadowSize: [41, 41],
                iconAnchor: [12, 41],
                shadowAnchor: [4, 62],
                popupAnchor: [-3, -76]
            });
        
            async function getCurrentLocation() {
                try {
                    const position = await new Promise((resolve, reject) => {
                        navigator.geolocation.getCurrentPosition((position) => {
                            resolve(position);
                        }, (error) => {
                            reject(error);
                        });
                    });
        
                    return {
                        lat: position.coords.latitude,
                        lon: position.coords.longitude
                    };
                } catch (error) {
                    console.error("Error fetching current location:", error);
                    alert("Unable to get your location. Please ensure location services are enabled and try again.");
                    return null;
                }
            }
        
            async function geocode(address) {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${address}`);
                const data = await response.json();
                if (data && data.length) {
                    return [data[0].lat, data[0].lon];
                } else {
                    alert("Address not found: " + address);
                    return null;
                }
            }

            function initializeDropPointMap(pointId, coords) {
                const mapId = `map-${pointId}`;
                const dropMap = L.map(mapId, {
                    fullscreenControl: true, // Add this line
                    fullscreenControlOptions: { // Add this block
                        position: 'topleft'
                    }
                }).setView([coords.lat, coords.lon], 13);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(dropMap);

                L.marker([coords.lat, coords.lon]).addTo(dropMap);
                maps[mapId] = dropMap;

                // Invalidate the map size after a short delay
                setTimeout(() => {
                    dropMap.invalidateSize();
                }, 200);
            }
        
            async function getDirections(pointId) {
    const startAddress = document.getElementById('startAddress-' + pointId).value;
    const endAddress = document.getElementById('detailsModal-' + pointId).getAttribute('data-location');

    const startCoords = await geocode(startAddress);
    const endCoords = await geocode(endAddress);

    if (!startCoords || !endCoords) return;

    const map = maps[`map-${pointId}`];
    if (routeControls[pointId]) {
        routeControls[pointId].remove();
        delete routeControls[pointId];
    }

    // Remove the current address marker if it exists
    if (currentAddressMarker[pointId]) {
        currentAddressMarker[pointId].remove();
        delete currentAddressMarker[pointId];
    }

    routeControls[pointId] = L.Routing.control({
        waypoints: [
            L.latLng(startCoords[0], startCoords[1]),
            L.latLng(endCoords[0], endCoords[1])
        ],
        routeWhileDragging: true,
        router: new L.Routing.osrmv1({
            serviceUrl: 'https://router.project-osrm.org/route/v1'
        }),
        lineOptions: {
            styles: [
                {color: 'red', opacity: 0.15, weight: 9},
                {color: 'white', opacity: 0.8, weight: 6},
                {color: 'red', opacity: 1, weight: 2}
            ]
        },
        createMarker: function(i, wp) {
            if (i === 0) { // This is the start marker
                return L.marker(wp.latLng, { icon: currentLocationIcon });
            } else { // This is the end marker
                return L.marker(wp.latLng);
            }
        }
    }).addTo(map);
}

            async function getCurrentAddress(pointId) {
                try { 
                    const position = await new Promise((resolve, reject) => {
                        navigator.geolocation.getCurrentPosition(resolve, reject);
                    });

                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;

                    // Reverse geocoding to get the address from the coordinates
                    const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
                    const data = await response.json();

                    if (data && data.address) {
                        // Construct the address string, checking for undefined properties
                        const road = data.address.road || "";
                        const city = data.address.city || data.address.town || ""; 
                        const state = data.address.state || "";
                        const country = data.address.country || "";
                        const address = `${road}, ${city}, ${state}, ${country}`.replace(/ ,/g, ",");

                        document.getElementById(`startAddress-${pointId}`).value = address.trim(); 

                        // Remove any existing current address marker before adding a new one
                        if (currentAddressMarker[pointId]) {
                            currentAddressMarker[pointId].remove();
                            delete currentAddressMarker[pointId];
                        }

                        currentAddressMarker[pointId] = L.marker([lat, lon], { icon: currentLocationIcon })
                            .addTo(maps[`map-${pointId}`])
                            .bindPopup("Current Address")
                            .openPopup();
                    } else {
                        alert("Unable to fetch current address.");
                    }
                } catch (error) {
                    console.error("Error fetching current address:", error);
                }
            }

            async function filterByDistance() {
                try {
                    userLocation = await getCurrentLocation(); // Ensure userLocation is defined
        
                    const dropPoints = $(".col-md-4").toArray();
        
                    for (const point of dropPoints) {
                        const address = $(point).find(".modal").data('location');
                        const data = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
                            .then(response => response.json());
        
                        if (data && data[0]) {
                            $(point).data('coords', { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon) });
                        }
                    }
        
                    dropPoints.sort((a, b) => {
                        const coordsA = $(a).data('coords');
                        const coordsB = $(b).data('coords');
        
                        if (!coordsA || !coordsB) return 0;
        
                        const distA = L.latLng(userLocation.lat, userLocation.lon).distanceTo(L.latLng(coordsA.lat, coordsA.lon));
                        const distB = L.latLng(userLocation.lat, userLocation.lon).distanceTo(L.latLng(coordsB.lat, coordsB.lon));
        
                        $(a).find('.distance-to-user').text(`Distance: ${(distA / 1000).toFixed(2)} km`);
                        $(b).find('.distance-to-user').text(`Distance: ${(distB / 1000).toFixed(2)} km`);
        
                        return distA - distB;
                    });
        
                    $("#dropPointsContainer").empty().append(dropPoints);
                    dropPoints.forEach(point => {
                        $(point).find('.card').attr({
                            'data-toggle': 'modal',
                            'data-target': `#detailsModal-${$(point).find('.modal').data('point-id')}`
                        });
                    });

        
                    // Initialize all modal maps after sorting
                    initializeAllModalMaps();
        
                    // After filtering, invalidate map size for correct rendering
                    setTimeout(() => {
                        for (let map in maps) {
                            if (maps.hasOwnProperty(map)) {
                                maps[map].invalidateSize();
                            }
                        }
                    }, 1500);
                } catch (error) {
                    console.error("Error sorting drop points:", error);
                    if (error.message.includes("Permission denied")) {
                        alert("Unable to get your location. Please ensure location services are enabled and try again.");
                    }
                }
            }
             
            $(document).ready(function() {
                
                filterByDistance();
                // Loop through each modal
                $('.modal').each(function() {
                    const modal = $(this);
                    const pointId = modal.data('point-id');
                    const mapId = `map-${pointId}`;

                    // Event listener for when a specific modal is shown
                    modal.on('shown.bs.modal', function(e) {
                        if (!maps[mapId]) {
                            const location = modal.data('location');
                            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`)
                                .then(response => response.json())
                                .then(data => {
                                    if (data && data[0]) {
                                        const coords = { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon) };
                                        initializeDropPointMap(pointId, coords);
                                    } else {
                                        console.error("Couldn't fetch coordinates for the location: ", location);
                                    }
                                }).catch(error => {
                                    console.error("Error fetching coordinates for the location: ", location, ". Error: ", error);
                                });
                        }
                    });
                });
            });
      
            $(document).on('click', '.refresh-map', function() {
                const mapId = $(this).data('map-id');
                const map = maps[mapId];
                if (map) {
                    map.invalidateSize();
                }
            });

            function initializeAllModalMaps() {
                $('.modal').each(function() {
                    const pointId = $(this).data('point-id');
                    const location = $(this).data('location');
        
                    if (!maps[`map-${pointId}`]) {
                        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data && data[0]) {
                                    const coords = { lat: parseFloat(data[0].lat), lon: parseFloat(data[0].lon) };
                                    initializeDropPointMap(pointId, coords);
                                } else {
                                    console.error("Couldn't fetch coordinates for the location: ", location);
                                }
                            }).catch(error => {
                                console.error("Error fetching coordinates for the location: ", location, ". Error: ", error);
                            });
                    }
                });
            }
 
       </script>
        
        <script>
        document.addEventListener("DOMContentLoaded", function() {
            function isNowBetweenTimes(start, end) {
                const now = new Date();
                const [startHour, startMinute] = start.split(':').map(Number);
                const [endHour, endMinute] = end.split(':').map(Number);

                const startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), startHour, startMinute);
                const endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), endHour, endMinute);

                return now >= startDate && now <= endDate;
            }

            const dropPoints = document.querySelectorAll('.drop-point');

            dropPoints.forEach(dropPoint => {
                const pointId = dropPoint.querySelector('span[id^="openingTime-"]').id.split('-')[1];
                const openingTime = document.getElementById(`openingTime-${pointId}`).textContent.trim();
                const closingTime = document.getElementById(`closingTime-${pointId}`).textContent.trim();

                const statusElement = dropPoint.querySelector('.status');
                if (isNowBetweenTimes(openingTime, closingTime)) {
                    statusElement.innerHTML = '<i class="fas fa-check-circle status-icon status-open"></i> Open';
                } else {
                    statusElement.innerHTML = '<i class="fas fa-times-circle status-icon status-closed"></i> Closed';
                }
            });
        });
    

        $("#search").on("input", function() {
            const query = $(this).val().toLowerCase();
            $(".card").each(function() {
                const pointName = $(this).find(".card-title").text().toLowerCase();
                if (pointName.includes(query)) {
                    $(this).parent().show();
                } else {
                    $(this).parent().hide();
                }
            });
        }); 
        // Stop modal from opening when these buttons are clicked
        document.querySelectorAll('.btn.btn-success, .btn.btn-primary').forEach(button => {
            button.addEventListener('click', function(event) { 
                event.stopPropagation();
            });
        });


        </script>  

    
    </body>

    </html>
