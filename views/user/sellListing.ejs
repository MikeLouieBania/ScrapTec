<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Selling Listings</title>
    <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Include Slick Slider CSS -->
    <link rel="stylesheet" type="text/css" href="slick/slick.css">
    <link rel="stylesheet" type="text/css" href="slick/slick-theme.css">
    <style>
        body{
            font-family: 'Poppins', sans-serif;
        }

        /* Navigation Bar Styles */
        .navbar.navbar-expand-lg.navbar-light.bg-light {
            background-color: #219ebc !important;
            padding: 10px 0;
        }
        
        .navbar .nav-link {
            color: white !important;
            font-family: 'Roboto Slab', serif,;
            font-weight: bold;
            font-size: 16px;
            margin-top: 15px;
            display: block;
            padding: 15px;
            text-decoration: none;
            text-transform: uppercase;
            margin: 0 10px;
            position: relative;
            transition: all .5s;
        }
        
        .navbar .nav-link::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background-color: #8ecae6;
            transform: scaleX(0);
            transition: transform 0.5s;
        }
        
        .navbar .nav-link:hover::after {
            transform: scaleX(1);
        }
        
        .navbar-brand {
            color: white !important;
            font-family: 'Roboto Slab', serif,;
            font-weight: bold;
            font-size: 16px;
            margin-top: -0.5px; /* Align with .nav-link */
            margin-left: 15px;
        }
        
        .navbar-light .navbar-toggler-icon {
            background-color: white;
        }
        
        /* Custom Logout Button Style */
        .btn-outline-success {
            background-color: #002244 !important;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            transition: background-color 0.3s;
            margin-right: 20px;
            font-weight: bold;
            color: white !important;
            font-family: 'Roboto Slab', serif,;
        }
        
        .btn-outline-success:hover {
            background-color: #6082B6 !important;
            color: #fff !important;
            text-decoration: none;
        }


        /* Add styles for the page title */
        .page-title {
            margin-top: 20px;
            font-size: 24px;
            margin-bottom: 20px;
        }

        /* Add styles for the listing container */
        .listing-container {
            margin-top: 50px;
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center; /* Center the items horizontally */
            align-items: start; /* Align items to the start of the container vertically */
        }

        /* Add styles for each listing card */
        .listing-card {
            border: none;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            width: 100%;
            max-width: 300px;
            max-height: 500px;
        }

        /* Add styles for the card body */
        .card-body {
            padding: 20px;
            max-height: 500px; /* Adjust this value as needed */
            overflow-y: auto; /* This will add a scrollbar if the content exceeds 500px */
        }

        /* Add styles for the card title */
        .card-title {
            font-size: 18px;
        }

        /* Add styles for the edit and delete buttons */
        .edit-button,
        .delete-button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 5px 15px;
            margin-top: 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Add hover effect to the edit and delete buttons */
        .edit-button:hover,
        .delete-button:hover {
            background-color: #0056b3;
        }

        /* Add styles for the image slider container */
        .image-slider {
            max-width: 100%;
        }

        /* Add styles for individual slider images */
        .slider-image {
            max-width: 100%;
            height: auto;
        }

        /* Adding hover effect to listing cards */
        .listing-card:hover {   
            transform: scale(1.05);
            transition: transform 0.2s ease-in-out;
        }

        /* Styling the Mark as Sold button */
        .mark-sold-button {
            background-color: #28a745;
            color: #fff;
            border: none;
            padding: 5px 15px;
            margin-top: 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        .mark-sold-button:hover {
            background-color: #218838;
        }

        /* Adding styles for the loading spinner */
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #000;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin: 20px auto;
        }

        .image-edit-container {
            display: flex;
            justify-content: space-between;
            align-items: start;
        }

        .current-images {
            flex: 1;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-right: 20px;
            max-height: 400px;
            overflow-y: auto;
        }

        .image-container {
            position: relative;
            display: inline-block;
        }

        .image-container img {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .remove-image-button {
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 2px 6px;
            font-size: 12px;
        }

        .add-images {
            flex-basis: 200px;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>
</head>

<body>
    <!-- Header -->
    <header>
        <!-- Include your header content or navigation menu here -->
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/user/marketplace">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/user/inbox">Inbox</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/user/buyListing">Buying</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/user/sellListing">Selling</a>
                    </li>
                </ul>
                <form class="form-inline my-2 my-lg-0" action="/user/logout" method="POST">
                    <button class="btn btn-outline-success my-2 my-sm-0" type="submit">LOGOUT</button>
                </form>
            </div>
        </nav>
        
    </header>

    <!-- Page Content -->
    <main>
        <h1 class="page-title">My Selling Listings</h1>

        <!-- List of Selling Listings -->
        <div class="listing-container">
            <!-- Example Listing Item (You can use a loop to generate items from your data) -->
            <% sellingListings.forEach(function(listing) { %>
                <div class="card listing-card">
                    <!-- Image Slider for listing images -->
                    <div id="carousel<%= listing.id %>" class="carousel slide image-slider" data-ride="carousel">
                        <div class="carousel-inner">
                            <% listing.photos.forEach(function(photo, index) { %>
                                <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                                    <img class="d-block w-100 slider-image" src="<%= photo.imageUrl %>" style="width: 200px; height: 200px;"
                                        alt="<%= listing.title %>">
                                </div>
                            <% }) %>
                        </div>
                    </div>

                    <!-- Card body -->
                    <div class="card-body">
                        <h2 class="card-title">
                            <%= listing.title %>
                        </h2>
                        <p class="card-text">Price: â‚±<%= listing.price %>
                        </p>
                        <p class="card-text">Category: <%= listing.category.name %>
                        </p>
                        <p class="card-text">Condition: <%= listing.condition.name %>
                        </p>
                        <p class="card-text">Location: <%= listing.location %>
                        </p>

                        <p class="card-text">Status: <%= listing.status %>
                        </p>
                        <a href="/user/editListing/<%= listing.id %>" class="btn btn-primary edit-button">Edit</a>
                        <a href="/user/deleteListing/<%= listing.id %>" class="btn btn-danger delete-button">Delete</a>
                        <!-- Mark as Sold Button -->
                        <% if (listing.sales && listing.sales.length> 0) { %>
                            <% listing.sales.forEach(sale=> { %>
                                <p class="card-text">
                                    Sold to: <a href="/user/profile/<%= sale.buyer.id %>">
                                        <%= sale.buyer.firstName %> <%= sale.buyer.lastName %>
                                    </a>
                                            <% if (sale.buyerRatings && sale.buyerRatings.length> 0) { %>
                                                <% sale.buyerRatings.forEach(rating=> { %>
                                                    <button class="btn btn-secondary" disabled>Rated Buyer: <%=
                                                            rating.value %> Stars</button>
                                                    <p>Comment: <%= rating.comment || "No comment provided" %>
                                                    </p>
                                                    <% }) %>
                                                        <% } else { %>
                                                            <button class="btn btn-primary rate-buyer-button"
                                                                data-toggle="modal" data-target="#rateBuyerModal"
                                                                data-buyer-id="<%= sale.buyer.id %>"
                                                                data-sale-id="<%= sale.id %>">Rate Buyer</button>

                                                            <% } %>
                                </p>
                            <% }) %>
                        <% } else if (listing.status.toLowerCase()==='available' ) { %>
                            <button class="btn btn-success mark-sold-button" data-toggle="modal" data-target="#markAsSoldModal" data-listing-id="<%= listing.id %>">Mark as Sold</button>
                        <% } %>
                         <a href="#" class="btn btn-primary edit-button" data-toggle="modal" data-target="#imageEditModal" data-listing-id="<%= listing.id %>" data-images='<%= JSON.stringify(listing.photos) %>'>Edit Images</a>

                    </div>
                </div>
                <% }) %>
                    <!-- Mark As Sold Modal -->
                    <div class="modal fade" id="markAsSoldModal" tabindex="-1" role="dialog"
                        aria-labelledby="markAsSoldModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="markAsSoldModalLabel">Choose Buyer</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <!-- The list of users will be populated here -->
                                    <div id="users-list"></div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" id="save-changes-btn">Save
                                        changes</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Rate Buyer Modal -->
                    <div class="modal fade" id="rateBuyerModal" tabindex="-1" role="dialog"
                        aria-labelledby="rateBuyerModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="rateBuyerModalLabel">Rate Buyer</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <!-- Rating input form -->
                                    <form id="rate-buyer-form">
                                        <div class="form-group">
                                            <label for="rating">Rating</label>
                                            <select class="form-control" id="rating" required>
                                                <option value="5">5 - Excellent</option>
                                                <option value="4">4 - Very Good</option>
                                                <option value="3">3 - Good</option>
                                                <option value="2">2 - Fair</option>
                                                <option value="1">1 - Poor</option>
                                            </select>
                                        </div>
                                        <div class="form-group">
                                            <label for="predefined-comments">What went well?</label>
                                            <select class="form-control" id="predefined-comments" required>
                                                <option value="Excellent Communication">Excellent Communication</option>
                                                <option value="Very Punctual">Very Punctual</option>
                                                <option value="Fair Pricing">Fair Pricing</option>
                                                <option value="Accurate Listing Description">Accurate Listing
                                                    Description</option>
                                            </select>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Submit Rating</button>
                                    </form>

                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Image Edit Modal -->
                    <div class="modal fade" id="imageEditModal" tabindex="-1" role="dialog" aria-labelledby="imageEditModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="imageEditModalLabel">Edit Images</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <form id="image-edit-form" enctype="multipart/form-data">
                                    <div class="modal-body">
                                        <div class="image-edit-container">
                                            <div id="current-images" class="current-images">
                                                <!-- Current images will be displayed here -->
                                            </div>
                                            <div id="add-images" class="add-images">
                                                <input type="file" id="new-image" name="newImages" class="form-control-file" multiple accept=".jpg,.jpeg,.png,.gif"> 
                                                <button type="button" id="add-image-button" class="btn btn-primary mt-2">Add Image</button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-primary" id="save-images-button">Update Changes</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>

        </div>
    </main>

    <!-- Include Bootstrap JS and Slick Slider JS -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="slick/slick.min.js"></script>
    <!-- Initialize Slick Slider -->
    <script>
        $(document).ready(function () {
            $(".image-slider").slick({
                infinite: true,
                slidesToShow: 1,
                slidesToScroll: 1,
                dots: true,
                autoplay: true,
                autoplaySpeed: 2000
            });
        });


        $(document).ready(function () {
            let currentBuyerId, currentSaleId;
            $('#markAsSoldModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget); // Button that triggered the modal
                const listingId = button.data('listing-id'); // Extract info from data-* attributes
                const modal = $(this);
                $(this).data('listing-id', listingId); // Store the listing ID in the modal's data attributes
                const usersList = modal.find('#users-list');

                // Fetch the users associated with the listing
                $.ajax({
                    url: `/user/listing/${listingId}/users`,
                    method: 'GET',
                    dataType: 'json',
                    success: function (users) {
                        // Clear the current list
                        usersList.empty();

                        // Populate the users list
                        users.forEach(user => {
                            const radioButton = `
                                <div class="user-item"> 
                                    <input type="radio" name="buyer" value="${user.id}" data-conversation-id="${user.conversationId}" id="user${user.id}">
                                    <label for="user${user.id}">${user.firstName} ${user.lastName}</label> 
                                </div>`;
                            usersList.append(radioButton);
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching users:', error);
                    }
                });
            });


            $('#rateBuyerModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                currentBuyerId = button.data('buyer-id');
                currentSaleId = button.data('sale-id'); 
            });


            $('#rate-buyer-form').submit(function (event) {
                event.preventDefault();
                const rating = $('#rating').val();
                const comment = $('#predefined-comments').val();

                // Send a request to the server to submit the rating
                $.ajax({
                    url: `/user/rate-buyer/${currentBuyerId}`,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ value: rating, comment, saleId: currentSaleId, buyerId: currentBuyerId }), // Include buyerId in the request body
                    success: function (response) {
                        alert('Rating submitted successfully!');
                        $('#rateBuyerModal').modal('hide');
                        location.reload(); // Reload the page to reflect changes
                    },
                    error: function (xhr, status, error) {
                        console.error('Error submitting rating:', error);
                        alert('Error submitting rating. Please try again.');
                    }
                });
            });


        });


        $('#save-changes-btn').click(function () {
            const buyerId = $('input[name="buyer"]:checked').val();
            const conversationId = $('input[name="buyer"]:checked').data('conversation-id');
            if (!buyerId) {
                alert('Please select a buyer.');
                return;
            }
            // Assuming you have stored the listing ID in a data attribute of the modal
            const listingId = $('#markAsSoldModal').data('listing-id');

            // Send a request to the server to mark the listing as sold
            $.ajax({
                url: `/user/mark-as-sold/${listingId}`,
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ buyerId, conversationId }), // Added for testing
                success: function (response) {
                    alert('Listing marked as sold successfully!');
                    location.reload(); // Reload the page to reflect changes
                },
                error: function (xhr, status, error) {
                    console.error('Error marking listing as sold:', error);
                    alert('Error marking listing as sold. Please try again.');
                }
            });
        });

        $(document).ready(function () {
            let currentImages = [];
            let removedImages = []; 
            const maxImages = 5;

            // Function to convert image to Base64
            function readImageAsBase64(file, callback) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    callback(e.target.result);
                };
                reader.readAsDataURL(file);
            }

            $('#imageEditModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const listingId = button.data('listing-id'); // Capture the listingId
                currentImages = JSON.parse(button.attr('data-images'));
                loadCurrentImages();
                
                // Store the listingId in a variable accessible to the submit function
                $('#image-edit-form').data('listing-id', listingId);
            });

            function loadCurrentImages() {
                const currentImagesContainer = $('#current-images');
                currentImagesContainer.empty();

                currentImages.forEach((image, index) => {
                    const imageUrl = image.imageUrl;
                    const removeButton = currentImages.length > 1 
                        ? `<button class="btn btn-danger remove-image-button" data-image-index="${index}">Remove</button>`
                        : '';
                    currentImagesContainer.append(
                        `<div class="image-container">
                            <img src="${imageUrl}" alt="Listing Image" class="img-thumbnail" width="150" height="150">
                            ${removeButton}
                        </div>`
                    );
                });

                // Disable add button if image limit is reached
                $('#add-image-button').prop('disabled', currentImages.length >= maxImages);
            }
            
            $('#add-image-button').click(function () {
                const fileInput = $('#new-image')[0];
                if (fileInput.files) {
                    // Only process files if the total number of images after addition does not exceed maxImages
                    const filesToAdd = Array.from(fileInput.files).slice(0, maxImages - currentImages.length);

                    filesToAdd.forEach(file => {
                        readImageAsBase64(file, (base64String) => {
                            currentImages.push({ imageUrl: base64String });
                            loadCurrentImages();
                        });
                    });
                }
            });

            $('#current-images').on('click', '.remove-image-button', function () {
                const imageIndex = $(this).data('image-index');
                if (currentImages.length > 1) {
                    removedImages.push(currentImages[imageIndex].id);
                    currentImages.splice(imageIndex, 1); // Remove the image from the array
                    loadCurrentImages(); // Refresh the images display
                }
            });

            $('#image-edit-form').submit(function (event) {
                event.preventDefault();

                // Retrieve the listingId from the form data
                const listingId = $(this).data('listing-id');

                // Serialize the form data, including images
                const formData = new FormData(this);
                formData.append('listingId', listingId); // Add the listingId

                // Append removed images as a JSON string
                formData.append('removedImages', JSON.stringify(removedImages));

                // Send the data via AJAX
                $.ajax({
                    type: 'POST',
                    url: `/user/update-images/${listingId}`, // Update with your route URL
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        // Handle the success response here, e.g., show a success message
                        $('#imageEditModal').modal('hide');
                    },
                    error: function (error) {
                        // Handle errors, e.g., display an error message
                        console.error('Error updating images:', error);
                    },
                });
            });


        });


    </script>
</body>

</html>