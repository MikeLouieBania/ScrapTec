<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create a New Listing</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Slab&display=swap">
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js">
        src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet'
        href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.0/mapbox-gl-geocoder.css'
        type='text/css' />

    <style>
        body{
            font-family: 'Poppins', sans-serif;
            overflow: hidden;
        }

        /* Navigation Bar Styles */
        .navbar.navbar-expand-lg.navbar-light.bg-light {
            background-color: #219ebc !important;
            padding: 10px 0;
        }
        
        .navbar .nav-link {
            color: white !important;
            font-family: 'Roboto Slab', serif,;
            font-weight: bold;
            font-size: 16px;
            margin-top: 15px;
            display: block;
            padding: 15px;
            text-decoration: none;
            text-transform: uppercase;
            margin: 0 10px;
            position: relative;
            transition: all .5s;
        }
        
        .navbar .nav-link::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 2px;
            background-color: #8ecae6;
            transform: scaleX(0);
            transition: transform 0.5s;
        }
        
        .navbar .nav-link:hover::after {
            transform: scaleX(1);
        }
        
        .navbar-brand {
            color: white !important;
            font-family: 'Roboto Slab', serif,;
            font-weight: bold;
            font-size: 16px;
            margin-top: -0.5px; /* Align with .nav-link */
            margin-left: 15px;
        }
        
        .navbar-light .navbar-toggler-icon {
            background-color: white;
        }
        
        /* Custom Logout Button Style */
        .btn-outline-success {
            background-color: #002244 !important;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            transition: background-color 0.3s;
            margin-right: 20px;
            font-weight: bold;
            color: white !important;
            font-family: 'Roboto Slab', serif,;
        }
        
        .btn-outline-success:hover {
            background-color: #6082B6 !important;
            color: #fff !important;
            text-decoration: none;
        }
        .navbar-collapse {
            display: flex;
            justify-content: space-between;
        }
        
        .form-inline {
            margin-left: auto;
        }
        

        /* Additional styles for the preview pane */
        #preview-pane {
            max-width: 600px;
            margin-top: 1rem; /* Reduced from mt-5 to 1rem */
            margin-left: auto;
            margin-right: 30px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
            position: relative; /* To enable upward movement */
            top: -650px; /* Adjust this value to move it upwards */
        }
    
        .preview-heading,
        .preview-text {
            /* Styles for preview headings and text */
            margin-bottom: 0.5rem;
        }
    
        #preview-details {
            padding: 15px;
            background-color: white; /* White background for the text details */
            border-radius: 5px; /* Rounded corners for the details box */
            
        }
    
        .preview-heading {
            font-size: 1.25rem; /* Slightly larger font size for headings */
            margin-top: 0;
        }
    
        .preview-text {
            font-size: 1rem; /* Standard font size for text */
            margin-bottom: 0.5rem; /* Space between the text items */
        }
    
        .map-container {
            height: 200px; /* Fixed height for the map */
            width: 100%; /* Full width of the column */
            background-color: #e9ecef; /* A placeholder background color */
            border: 1px solid #ddd; /* A light border around the map */
            border-radius: 5px; /* Rounded corners for the map */
        }
    
        @media (max-width: 767px) {
            #preview-pane .row > div {
                margin-bottom: 20px; /* Add some space between stacked columns on small screens */
            }
        }
    

        #location-map {
            width: 100%;
            height: 150px;
            margin-top: 15px;
        }
        #create-listing-form {
            max-width: 600px;
            margin: 5rem auto 0;
            padding-top: 5rem;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            padding-bottom: 20px;
            margin-left: 20px;
        }
    
        #create-listing-form h2 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
    
        #create-listing-form .form-label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
    
        #create-listing-form .form-control {
            width: 100%;
            padding: 8px 12px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    
        #create-listing-form .form-control:focus {
            border-color: #4A90E2;
            outline: none;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.3);
        }
    
        #create-listing-form select.form-control {
            display: block;
            width: 100%;
        }
    
        #create-listing-form #suggestions {
            font-size: 0.9rem;
            color: #6c757d;
        }
    
        #create-listing-form .btn {
            padding: 10px 20px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }
    
        #create-listing-form .btn-primary {
            background-color: #007bff;
            color: white;
        }
    
        #create-listing-form .btn-primary:hover {
            background-color: #0056b3;
        }
    
        #create-listing-form .btn-secondary {
            background-color: #6c757d;
            color: white;
        }
    
        #create-listing-form .btn-secondary:hover {
            background-color: #545b62;
        }
    
        #create-listing-form .mb-3 {
            margin-bottom: 16px;
        }
    </style>
</head>

<body>

 <!--Navigation Bar -->
 <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/user/marketplace">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/user/inbox">Inbox</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/user/buyListing">Buying</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/user/sellListing">Selling</a>
            </li>
        </ul>
        <form class="form-inline my-2 my-lg-0" action="/user/logout" method="POST">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">LOGOUT</button>
        </form>
    </div>
</nav>
    

     <!-- Create Listing Form -->
<div class="container mt-5 pt-5" id="create-listing-form">
    <h2>Create New Listing</h2>
    <form action="/user/createListing" method="post" enctype="multipart/form-data">
        <!-- Hidden Input for User ID -->
        <input type="hidden" name="userId" value="<%= userId %>">

        <div class="row">
            <!-- Left Column -->
            <div class="col-md-6">
                <!-- For Photos -->
                <div class="mb-3">
                    <label for="photos" class="form-label">Photos:</label>
                    <input type="file" class="form-control" name="photos" id="photos" multiple
                        accept=".jpg,.jpeg,.png,.gif" onchange="handleFileChange()">
                    <small class="text-danger" id="file-error"></small>
                </div>

                <!-- For Title -->
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <input type="text" class="form-control" name="title" required>
                </div>
            </div>

            <!-- Right Column -->
            <div class="col-md-6">
                <!-- For Price -->
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <input type="number" step="0.01" class="form-control" name="price" required>
                </div>

                <!-- For Category -->
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <select name="categoryId" class="form-control" required>
                        <option value="" selected disabled>Select Category</option>
                        <% categories.forEach(function(category) { %>
                            <option value="<%= category.id %>">
                                <%= category.name %>
                            </option>
                        <% }) %>
                    </select>
                </div>

                <!-- For Condition -->
                <div class="mb-3">
                    <label for="condition" class="form-label">Condition:</label>
                    <select name="conditionId" class="form-control" required>
                        <option value="" selected disabled>Select Condition</option>
                        <% conditions.forEach(function(condition) { %>
                            <option value="<%= condition.id %>">
                                <%= condition.name %>
                            </option>
                        <% }) %>
                    </select>
                </div>
            </div>
        </div>

        <!-- Remaining Fields (Single Column) -->
        <div class="mb-3">
            <label for="description" class="form-label">Description:</label>
            <textarea name="description" class="form-control" required></textarea>
        </div>
        <div class="mb-3">
            <label for="location" class="form-label">Location:</label>
            <input type="search" class="form-control" name="location" id="location-input" required>
            <div id="suggestions" style="margin-top: 10px;"></div>
        </div>

        <!-- Submit Button -->
        <div class="mb-3">
            <button type="submit" class="btn btn-primary">Submit Listing</button>
            <a href="marketplace" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Preview Pane -->
<div class="container mt-5 pt-5" id="preview-pane">
    <h2>Preview</h2>
    <div class="row">
        <!-- Image Preview -->
        <div class="col-md-6">
            <div id="image-previews" class="mb-4"></div> <!-- Container for multiple images -->
        </div>
        <!-- Details Preview -->
        <div class="col-md-6">
            <div id="preview-details">
                <h5 id="preview-title" class="preview-heading">Title</h5>
                <p id="preview-price" class="preview-text">Price</p>
                <p id="preview-category" class="preview-text">Category</p>
                <p id="preview-condition" class="preview-text">Condition</p>
                <p id="preview-description" class="preview-text">Description</p>
                <p id="preview-location" class="preview-text">Location</p>
            </div>
            <div id="location-map" class="map-container"></div>
        </div>
    </div>
</div>


            </div>
        </div>
    </div>

    <script>
        // Mapbox initialization
        mapboxgl.accessToken = 'pk.eyJ1IjoibWlrZWJhbmlhIiwiYSI6ImNsajg5eTVkazEwcWQzcXF6MWFudW83YW8ifQ.ApPsVPuZUJQI2j4q5nQtkw'; // Replace with your Mapbox access token
        const map = new mapboxgl.Map({
            container: 'location-map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [120.9842, 14.5995], // Default longitude and latitude set to Manila
            zoom: 10
        });


        // Get input, suggestions div, and selected location
        const input = document.getElementById('location-input');
        const suggestionsDiv = document.getElementById('suggestions');
        let selectedLocation = null;

        // Function to fetch location suggestions
        function fetchLocationSuggestions(query) {
            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${query}.json?access_token=${mapboxgl.accessToken}&country=PH`)
                .then(response => response.json())
                .then(data => {
                    suggestionsDiv.innerHTML = '';
                    data.features.forEach(feature => {
                        let placeName = feature.place_name;
                        let suggestionDiv = document.createElement('div');
                        suggestionDiv.textContent = placeName;
                        suggestionDiv.style.cursor = 'pointer';
                        suggestionDiv.onclick = function () {
                            input.value = placeName;
                            suggestionsDiv.innerHTML = '';
                            selectedLocation = feature.geometry.coordinates;
                            updateMapAndPreview(selectedLocation, placeName);
                        };
                        suggestionsDiv.appendChild(suggestionDiv);
                    });
                });
        }

        // Event listener for input changes
        input.addEventListener('input', function () {
            const query = this.value.trim();
            if (query.length >= 2) {
                fetchLocationSuggestions(query);
            } else {
                suggestionsDiv.innerHTML = '';
            }
        });

        function computeCircleSizeFromBbox(bbox) {
            if (!bbox || bbox.length !== 4) {
                return 5; // default circle size
            }
            const width = Math.abs(bbox[2] - bbox[0]);
            const height = Math.abs(bbox[3] - bbox[1]);
            const diagonalLength = Math.sqrt(width * width + height * height);

            // Adjust this calculation as needed
            return diagonalLength * 5;  // Increased scale factor
        }

        // Function to update the map location and preview
        function updateMapAndPreview(coordinates, placeName) {
            map.flyTo({ center: coordinates, zoom: 15 });  // Adjusted zoom level to 15
            document.getElementById('preview-location').textContent = placeName; // Display the selected location in the preview

            // Check if the circle layer already exists, if it does, remove it
            if (map.getLayer('location-circle')) {
                map.removeLayer('location-circle');
                map.removeSource('location-circle');
            }

            // Add the circle layer at the selected location
            map.addLayer({
                'id': 'location-circle',
                'type': 'circle',
                'source': {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': [{
                            'type': 'Feature',
                            'geometry': {
                                'type': 'Point',
                                'coordinates': coordinates
                            }
                        }]
                    }
                },
                'paint': {
                    'circle-radius': [
                        "interpolate",
                        ["linear"],
                        ["zoom"],
                        7, 10,    // Adjusted values for smaller circle
                        15, 150  // Adjusted values for smaller circle
                    ],
                    'circle-color': '#007cbf',
                    'circle-opacity': 0.5 // 50% opacity to make the circle semi-transparent
                }
            });
        }

        // Photos preview
        function handleFileChange() {
            const photosInput = document.getElementById('photos');
            const previewsContainer = document.getElementById('image-previews');
            previewsContainer.innerHTML = ''; // Clear previews first

            if (photosInput.files.length > 5) {
                photosInput.setCustomValidity('You can only upload a maximum of 5 photos.');
                document.getElementById('file-error').textContent = 'You can only upload a maximum of 5 photos.';
                photosInput.value = ''; // Reset the input if more than 5 files
            } else {
                photosInput.setCustomValidity('');
                document.getElementById('file-error').textContent = '';
            }

            displayImagePreview(photosInput);
        }

        function displayImagePreview(input) {
            const previewsContainer = document.getElementById('image-previews');

            for (let i = 0; i < input.files.length; i++) {
                const file = input.files[i];
                const reader = new FileReader();

                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.setAttribute('src', e.target.result);
                    img.setAttribute('alt', 'Preview Image');
                    img.classList.add('img-fluid');
                    img.style.maxHeight = '100px';
                    img.style.marginRight = '5px';
                    previewsContainer.appendChild(img);
                }
                reader.readAsDataURL(file);
            }
        }

        // Event Listeners for previews
        document.querySelector('input[name="title"]').addEventListener('input', function () {
            document.getElementById('preview-title').textContent = this.value;
        });

        document.querySelector('input[name="price"]').addEventListener('input', function () {
            document.getElementById('preview-price').textContent = `$${this.value}`;
        });

        document.querySelector('select[name="categoryId"]').addEventListener('change', function () {
            const text = this.selectedIndex >= 0 ? this.options[this.selectedIndex].text : 'Category';
            document.getElementById('preview-category').textContent = text;
        });

        document.querySelector('select[name="conditionId"]').addEventListener('change', function () {
            const text = this.selectedIndex >= 0 ? this.options[this.selectedIndex].text : 'Condition';
            document.getElementById('preview-condition').textContent = text;
        });


        document.querySelector('textarea[name="description"]').addEventListener('input', function () {
            document.getElementById('preview-description').textContent = this.value;
        });
    </script>

</body>

</html>