<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= listing.title %>
    </title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.css' rel='stylesheet' />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.js'></script>
</head>
<style>
    body{
        font-family: 'Poppins', sans-serif;
    }

    /* Navigation Bar Styles */
    .navbar.navbar-expand-lg.navbar-light.bg-light {
        background-color: #219ebc !important;
        padding: 10px 0;
    }
    
    .navbar .nav-link {
        color: white !important;
        font-family: 'Roboto Slab', serif,;
        font-weight: bold;
        font-size: 16px;
        margin-top: 15px;
        display: block;
        padding: 15px;
        text-decoration: none;
        text-transform: uppercase;
        margin: 0 10px;
        position: relative;
        transition: all .5s;
    }
    
    .navbar .nav-link::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 2px;
        background-color: #8ecae6;
        transform: scaleX(0);
        transition: transform 0.5s;
    }
    
    .navbar .nav-link:hover::after {
        transform: scaleX(1);
    }
    
    .navbar-brand {
        color: white !important;
        font-family: 'Roboto Slab', serif,;
        font-weight: bold;
        font-size: 16px;
        margin-top: -0.5px; /* Align with .nav-link */
        margin-left: 15px;
    }
    
    .navbar-light .navbar-toggler-icon {
        background-color: white;
    }
    
    /* Custom Logout Button Style */
    .btn-outline-success {
        background-color: #002244 !important;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        transition: background-color 0.3s;
        margin-right: 20px;
        font-weight: bold;
        color: white !important;
        font-family: 'Roboto Slab', serif,;
    }
    
    .btn-outline-success:hover {
        background-color: #6082B6 !important;
        color: #fff !important;
        text-decoration: none;
    }

        /* Base container styles */
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-top: 5rem;
            margin-bottom: 2rem;
        }

        /* Headings and text */
        h2, h5 {
            color: #333;
            margin-bottom: 1rem;
        }

        p {
            color: #666;
            line-height: 1.5;
        }

        /* Buttons */
        .btn {
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
        }

        .btn-outline-primary {
            border-color: #007bff;
            color: #007bff;
        }

        .btn-outline-primary:hover {
            background-color: #007bff;
            color: #fff;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            box-shadow: none; /* Optional: remove if you prefer a shadow */
        }

        /* Forms and inputs */
        form {
            margin-top: 1rem;
        }

        form .form-control {
            border-radius: 0.25rem;
            border: 1px solid #ced4da;
        }

        form .btn-primary {
            width: 100%; /* Full width button */
            margin-top: 1rem; /* Spacing after the textarea */
        }

        /* Increase margin-top for the carousel-container */
        .carousel-container {
            margin-top: 80px; /* Adjust the value as needed to move the container down */
            text-align: center;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
        }

        /* Carousel Inner Image styling */
        .carousel-inner img {
            max-height: 300px; /* Maximum height for images */
            width: auto; /* Auto width for maintaining aspect ratio */
            margin: auto; /* Center image horizontally */
            object-fit: contain; /* Ensure the image fits well within the container */
        }

        /* Style for the carousel */
        .carousel {
            margin-bottom: 15px; /* Spacing below the carousel */
        }

        /* Ensure that the carousel controls are positioned correctly */
        .carousel-control-prev, .carousel-control-next {
            width: 5%; /* Control width */
        }


        /* Maps and images */
        #map {
            width: 100%;
            height: 300px;
            margin-bottom: 1rem;
        }

        /* Suggested messages */
        .suggested-messages {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem; /* Spacing between buttons */
        }

        /* Listing description */
        .listing-description {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.5rem;
        }

        /* Media query for mobile screens */
        @media (max-width: 576px) {
            .btn {
                width: 100%; /* Full-width buttons on mobile */
                margin-right: 0;
            }

            .suggested-messages {
                flex-direction: column; /* Stack the buttons on mobile */
            }
        }
                /* Style for the send message form */
        #send-message-form {
            display: flex;
            flex-wrap: wrap; /* Allows for wrapping on smaller screens */
            align-items: stretch; /* Stretches items to fill the container */
        }

                /* Directly target the textarea within the form with ID */
        #send-message-form textarea.form-control {
            flex: 1; /* Flex grow to take available space */
            margin-bottom: 0;
            margin-left: 10px; /* Space between textarea and button */
        }

        /* Directly target the button within the form with ID */
        #send-message-form button[type="submit"] {
            flex: 0 0 auto; /* Do not grow or shrink */
            white-space: nowrap;
            margin-left: 10px;
        }
        .contact-seller{
            margin-left: 10px;
        }

        @media (max-width: 768px) {
            #send-message-form textarea.form-control,
            #send-message-form button[type="submit"] {
                margin-right: 0;
                width: calc(100% - 20px); /* Full width minus padding */
            }
        }

        .buttons-container {
            display: inline-block; /* Align items in a line */
        }
        
        .buttons-container form,
        .buttons-container button {
            display: inline-block; /* Display buttons inline */
            margin-right: 10px; /* Space between buttons */
        }
        

</style>

<body>
    <!-- Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navContent" aria-controls="navContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/user/marketplace">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/user/inbox">Inbox</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/user/buyListing">Buying</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/user/sellListing">Selling</a>
            </li>
        </ul>
        <form class="form-inline" action="/user/logout" method="POST">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">LOGOUT</button>
        </form>
    </div>
</nav>





    <div class="container mt-5">
        <h2 class="mb-3">
            <%= listing.title %>
        </h2>
        <div class="row">
            <div class="col-md-6">
                <div class="buttons-container">
                <!-- Save/Unsave Listing Button -->
                <% if (!existingSavedListing) { %>
                    <form action="/user/saveListing/<%= listing.id %>" method="POST">
                        <button type="submit" class="btn btn-success">Save Listing</button>
                    </form>
                <% } else { %>
                    <!-- Use a button to trigger AJAX call to unsave a listing -->
                    <button onclick="unsaveListing('<%= listing.id %>')" class="btn btn-danger">Unsave Listing</button>
                <% } %> 
                <button type="button" class="btn btn-warning" data-toggle="modal" data-target="#reportModal">Report Listing</button>
                 

                
            </div>
                <p>Price: â‚±<%= listing.price %>
                </p>
                <p>Category: <%= listing.category.name %>
                </p>
                <p>Condition: <%= listing.condition.name %>
                </p>
                <p>Location: <%= listing.location %>
                </p>
                <div id='map' style='width: 100%; height: 300px;'></div>
                <p>Status: <%= listing.status %>
                </p>
                <p>Seller:
                    <a href="/user/profile/<%= listing.user.id %>">
                        <%= listing.user.firstName %>
                            <%= listing.user.lastName %>
                    </a>
                </p>
                <p>Contact Number: <%= listing.user.contactNumber %>
                </p>
            </div>
            <div class="col-md-6">
                <div class="carousel-container">
                <div id="carousel<%= listing.id %>" class="carousel slide mb-4" data-ride="carousel">
                    <div class="carousel-inner">
                        <% listing.photos.forEach(function(photo, index) { %>
                            <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                                <img class="d-block w-100" style="max-height: 300px; max-width: 300px; " src="<%= photo.imageUrl %>"
                                    alt="<%= listing.title %>">
                            </div>
                            <% }) %>
                    </div>
                    <a class="carousel-control-prev" href="#carousel<%= listing.id %>" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" ariahidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#carousel<%= listing.id %>" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
                <div class="listing-description mb-4">
                    <h5>Description</h5>
                    <p>
                        <%= listing.description %>
                    </p>
                </div>
            </div>
        </div>
        <% if (existingConversation) { %>
            <!-- View Conversation Button -->
            <a href="/user/buyConversation/<%= listing.id %>" class="btn btn-info">View Conversation</a>
            <% } else { %>
                <!-- Send seller a message -->
                <div class="contact-seller">
                    <h5>Contact Seller</h5>
                    <div class="suggested-messages mb-2">
                        <p>Send seller a message:</p>
                        <button class="btn btn-sm btn-outline-primary suggest-btn"
                            data-message="Is this item still available?">Is this available?</button>
                        <!-- Add more buttons for other suggested messages -->
                    </div>

                    <form id="send-message-form">
                        <input type="hidden" name="listing_id" value="<%= listing.id %>">
                        <textarea name="message" rows="4" class="form-control mb-3"
                            placeholder="Type your message to the seller..." style="width: 300px;"></textarea>
                        <button type="submit" class="btn btn-primary">Send Message</button>
                    </form>

                    <script>
                        document.getElementById('send-message-form').addEventListener('submit', function(e) {
                            e.preventDefault(); // Prevent the default form submission
                        
                            var formData = new FormData(this);
                        
                            fetch('/user/send_message_buyer', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if(data.success) {
                                    // Redirect to the conversation page
                                    window.location.href = '/user/buyConversation/' + formData.get('listing_id');
                                } else {
                                    // Handle the error, show message to the user
                                    alert(data.error || 'An error occurred while sending the message.');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('An error occurred while sending the message.');
                            });
                        });
                    </script>


                    <script>
                        const suggestButtons = document.querySelectorAll('.suggest-btn');
                        const messageTextarea = document.querySelector('textarea[name="message"]');

                        suggestButtons.forEach(button => {
                            button.addEventListener('click', function () {
                                const suggestedMessage = this.getAttribute('data-message');
                                messageTextarea.value = suggestedMessage;
                            });
                        });
                    </script>
                </div>
                <% } %>

                <!-- Report Listing Modal -->
                <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="reportModalLabel">Report Listing</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="reportForm">
                                    <div class="form-group">
                                        <label>Let us know what's going on</label>
                                        <div class="checkbox-group">
                                            <div><input type="checkbox" id="inaccurateDescription" name="reportReason[]" value="inaccurateDescription"> <label for="inaccurateDescription">Inaccurate Description</label></div>
                                            <div><input type="checkbox" id="promotingBusiness" name="reportReason[]" value="promotingBusiness"> <label for="promotingBusiness">Promoting a Business</label></div>
                                            <div><input type="checkbox" id="animalSales" name="reportReason[]" value="animalSales"> <label for="animalSales">Animal Sales</label></div>
                                            <div><input type="checkbox" id="noIntentToSell" name="reportReason[]" value="noIntentToSell"> <label for="noIntentToSell">No Intent to Sell</label></div>
                                            <div><input type="checkbox" id="weaponOrDrugSales" name="reportReason[]" value="weaponOrDrugSales"> <label for="weaponOrDrugSales">Weapon or Drug Sales</label></div>
                                            <div><input type="checkbox" id="sexualizedContent" name="reportReason[]" value="sexualizedContent"> <label for="sexualizedContent">Sexualized Content or Adult Products</label></div>
                                            <div><input type="checkbox" id="discrimination" name="reportReason[]" value="discrimination"> <label for="discrimination">Discrimination</label></div>
                                            <div><input type="checkbox" id="abusiveContent" name="reportReason[]" value="abusiveContent"> <label for="abusiveContent">Abusive or Harmful Content</label></div>
                                            <div><input type="checkbox" id="scam" name="reportReason[]" value="scam"> <label for="scam">Scam</label></div>
                                            <div><input type="checkbox" id="counterfeit" name="reportReason[]" value="counterfeit"> <label for="counterfeit">Appears to be Counterfeit</label></div>
                                            <div><input type="checkbox" id="childAbuse" name="reportReason[]" value="noIntentToSell"> <label for="childAbuse">Child Abuse</label></div>
                                        </div>
                                    </div> 
                                    <input type="hidden" name="listingId" value="<%= listing.id %>">
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-danger">Report</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
                <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
                <script>
                    function unsaveListing(listingId) {
                        $.ajax({
                            url: `/user/unsaveListing/${listingId}`,
                            method: 'POST',
                            success: function(response) {
                            alert('Listing unsaved successfully!');
                            location.reload(); // Reload the page to reflect changes
                            // Optionally remove the listing from the DOM or update the button state here
                            },
                            error: function(xhr, status, error) {
                            console.error('Error unsaving listing:', error);
                            alert('Error unsaving listing. Please try again.');
                            }
                        });
                        } 
                </script>

                <script>
                    var map;

                    function computeCircleSizeFromBbox(bbox) {
                        if (!bbox || bbox.length !== 4) {
                            return 5; // default circle size
                        }
                        const width = Math.abs(bbox[2] - bbox[0]);
                        const height = Math.abs(bbox[3] - bbox[1]);
                        const diagonalLength = Math.sqrt(width * width + height * height);
                        return diagonalLength * 300;
                    }

                    function updateMapAndPreview(coordinates, bbox) {
                        map.flyTo({ center: coordinates, zoom: 15 });

                        // Check if the circle layer already exists, if it does, remove it
                        if (map.getLayer('location-circle')) {
                            map.removeLayer('location-circle');
                            map.removeSource('location-circle');
                        }

                        // Compute circle size from bounding box
                        const circleSize = computeCircleSizeFromBbox(bbox);

                        // Add the circle layer at the selected location
                        map.addLayer({
                            'id': 'location-circle',
                            'type': 'circle',
                            'source': {
                                'type': 'geojson',
                                'data': {
                                    'type': 'FeatureCollection',
                                    'features': [{
                                        'type': 'Feature',
                                        'geometry': {
                                            'type': 'Point',
                                            'coordinates': coordinates
                                        },
                                        'properties': {
                                            'radius': circleSize
                                        }
                                    }]
                                }
                            },
                            'paint': {
                                'circle-radius': ['get', 'radius'], // Use a data-driven style for the circle radius
                                'circle-color': '#007cbf',
                                'circle-opacity': 0.5
                            }
                        });
                    }

                    function geocodeLocation(location, callback) {
                        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(location)}.json?access_token=pk.eyJ1IjoibWlrZWJhbmlhIiwiYSI6ImNsajg5eTVkazEwcWQzcXF6MWFudW83YW8ifQ.ApPsVPuZUJQI2j4q5nQtkw`)
                            .then(response => response.json())
                            .then(data => {
                                if (data && data.features && data.features[0]) {
                                    const coordinates = data.features[0].center;
                                    const bbox = data.features[0].bbox;
                                    callback(null, coordinates, bbox);
                                } else {
                                    callback(new Error("Failed to geocode location"));
                                }
                            })
                            .catch(error => {
                                callback(error);
                            });
                    }

                    geocodeLocation('<%= listing.location %>', function (error, coordinates, bbox) {
                        if (error) {
                            console.error(error);
                            return;
                        }

                        mapboxgl.accessToken = 'pk.eyJ1IjoibWlrZWJhbmlhIiwiYSI6ImNsajg5eTVkazEwcWQzcXF6MWFudW83YW8ifQ.ApPsVPuZUJQI2j4q5nQtkw';
                        map = new mapboxgl.Map({
                            container: 'map',
                            style: 'mapbox://styles/mapbox/streets-v11',
                            center: coordinates,
                            zoom: 14
                        });

                        map.on('load', function () {
                            updateMapAndPreview(coordinates, bbox);
                        });
                    });

                </script>
                
                <script>
                    $(document).ready(function() {
                        $('#reportForm').submit(function(e) {
                            e.preventDefault();
                
                            const formData = {
                                reportReasons: $('input[name="reportReason[]"]:checked').map(function() {
                                    return this.value;
                                }).get(),
                                additionalComments: $('#additionalComments').val(),
                                listingId: $('input[name="listingId"]').val()
                            };
                
                            $.ajax({
                                url: '/user/report-listing',
                                type: 'POST',
                                data: JSON.stringify(formData),
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                success: function(response) {
                                    // Handle success - maybe show a message to the user
                                    alert('Report submitted successfully');
                                    window.location.href = '/user/marketplace';
                                    $('#reportModal').modal('hide');
                                },
                                error: function(xhr, status, error) {
                                    // Handle error
                                    alert('Error submitting report');
                                }
                            });
                        });
                    });
                </script>
                
                      
    </div>
</body>

</html>