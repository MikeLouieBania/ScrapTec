<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= listing.title %>
    </title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.js'></script>
</head>

<body>
    <div class="container mt-5">
        <h2 class="mb-3">
            <%= listing.title %>
        </h2>
        <div class="row">
            <div class="col-md-6">
                <!-- Save/Unsave Listing Button -->
                <% if (!existingSavedListing) { %>
                    <form action="/user/saveListing/<%= listing.id %>" method="POST">
                        <button type="submit" class="btn btn-success">Save Listing</button>
                    </form>
                <% } else { %>
                    <!-- Use a button to trigger AJAX call to unsave a listing -->
                    <button onclick="unsaveListing('<%= listing.id %>')" class="btn btn-danger">Unsave Listing</button>
                <% } %>

                <p>Price: $<%= listing.price %>
                </p>
                <p>Category: <%= listing.category.name %>
                </p>
                <p>Condition: <%= listing.condition.name %>
                </p>
                <p>Location: <%= listing.location %>
                </p>
                <div id='map' style='width: 100%; height: 300px;'></div>
                <p>Status: <%= listing.status %>
                </p>
                <p>Seller:
                    <a href="/user/profile/<%= listing.user.id %>">
                        <%= listing.user.firstName %>
                            <%= listing.user.lastName %>
                    </a>
                </p>
                <p>Contact Number: <%= listing.user.contactNumber %>
                </p>
            </div>
            <div class="col-md-6">
                <div id="carousel<%= listing.id %>" class="carousel slide mb-4" data-ride="carousel">
                    <div class="carousel-inner">
                        <% listing.photos.forEach(function(photo, index) { %>
                            <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                                <img class="d-block w-100" style="max-height: 400px;" src="<%= photo.imageUrl %>"
                                    alt="<%= listing.title %>">
                            </div>
                            <% }) %>
                    </div>
                    <a class="carousel-control-prev" href="#carousel<%= listing.id %>" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" ariahidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#carousel<%= listing.id %>" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
                <div class="listing-description mb-4">
                    <h5>Description</h5>
                    <p>
                        <%= listing.description %>
                    </p>
                </div>
            </div>
        </div>
        <% if (existingConversation) { %>
            <!-- View Conversation Button -->
            <a href="/user/buyConversation/<%= listing.id %>" class="btn btn-info">View Conversation</a>
            <% } else { %>
                <!-- Send seller a message -->
                <div class="contact-seller">
                    <h5>Contact Seller</h5>
                    <div class="suggested-messages mb-2">
                        <p>Send seller a message:</p>
                        <button class="btn btn-sm btn-outline-primary suggest-btn"
                            data-message="Is this item still available?">Is this available?</button>
                        <!-- Add more buttons for other suggested messages -->
                    </div>

                    <form id="send-message-form">
                        <input type="hidden" name="listing_id" value="<%= listing.id %>">
                        <textarea name="message" rows="4" class="form-control mb-3"
                            placeholder="Type your message to the seller..."></textarea>
                        <button type="submit" class="btn btn-primary">Send Message</button>
                    </form>

                    <script>
                        document.getElementById('send-message-form').addEventListener('submit', function(e) {
                            e.preventDefault(); // Prevent the default form submission
                        
                            var formData = new FormData(this);
                        
                            fetch('/user/send_message_buyer', {
                                method: 'POST',
                                body: formData
                            })
                            .then(response => response.json())
                            .then(data => {
                                if(data.success) {
                                    // Redirect to the conversation page
                                    window.location.href = '/user/buyConversation/' + formData.get('listing_id');
                                } else {
                                    // Handle the error, show message to the user
                                    alert(data.error || 'An error occurred while sending the message.');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('An error occurred while sending the message.');
                            });
                        });
                    </script>


                    <script>
                        const suggestButtons = document.querySelectorAll('.suggest-btn');
                        const messageTextarea = document.querySelector('textarea[name="message"]');

                        suggestButtons.forEach(button => {
                            button.addEventListener('click', function () {
                                const suggestedMessage = this.getAttribute('data-message');
                                messageTextarea.value = suggestedMessage;
                            });
                        });
                    </script>
                </div>
                <% } %>

                    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
                    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
                    <script>
                        function unsaveListing(listingId) {
                            $.ajax({
                                url: `/user/unsaveListing/${listingId}`,
                                method: 'POST',
                                success: function(response) {
                                alert('Listing unsaved successfully!');
                                location.reload(); // Reload the page to reflect changes
                                // Optionally remove the listing from the DOM or update the button state here
                                },
                                error: function(xhr, status, error) {
                                console.error('Error unsaving listing:', error);
                                alert('Error unsaving listing. Please try again.');
                                }
                            });
                            } 
                    </script>

                    <script>
                        var map;

                        function computeCircleSizeFromBbox(bbox) {
                            if (!bbox || bbox.length !== 4) {
                                return 5; // default circle size
                            }
                            const width = Math.abs(bbox[2] - bbox[0]);
                            const height = Math.abs(bbox[3] - bbox[1]);
                            const diagonalLength = Math.sqrt(width * width + height * height);
                            return diagonalLength * 300;
                        }

                        function updateMapAndPreview(coordinates, bbox) {
                            map.flyTo({ center: coordinates, zoom: 15 });

                            // Check if the circle layer already exists, if it does, remove it
                            if (map.getLayer('location-circle')) {
                                map.removeLayer('location-circle');
                                map.removeSource('location-circle');
                            }

                            // Compute circle size from bounding box
                            const circleSize = computeCircleSizeFromBbox(bbox);

                            // Add the circle layer at the selected location
                            map.addLayer({
                                'id': 'location-circle',
                                'type': 'circle',
                                'source': {
                                    'type': 'geojson',
                                    'data': {
                                        'type': 'FeatureCollection',
                                        'features': [{
                                            'type': 'Feature',
                                            'geometry': {
                                                'type': 'Point',
                                                'coordinates': coordinates
                                            },
                                            'properties': {
                                                'radius': circleSize
                                            }
                                        }]
                                    }
                                },
                                'paint': {
                                    'circle-radius': ['get', 'radius'], // Use a data-driven style for the circle radius
                                    'circle-color': '#007cbf',
                                    'circle-opacity': 0.5
                                }
                            });
                        }

                        function geocodeLocation(location, callback) {
                            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(location)}.json?access_token=pk.eyJ1IjoibWlrZWJhbmlhIiwiYSI6ImNsajg5eTVkazEwcWQzcXF6MWFudW83YW8ifQ.ApPsVPuZUJQI2j4q5nQtkw`)
                                .then(response => response.json())
                                .then(data => {
                                    if (data && data.features && data.features[0]) {
                                        const coordinates = data.features[0].center;
                                        const bbox = data.features[0].bbox;
                                        callback(null, coordinates, bbox);
                                    } else {
                                        callback(new Error("Failed to geocode location"));
                                    }
                                })
                                .catch(error => {
                                    callback(error);
                                });
                        }

                        geocodeLocation('<%= listing.location %>', function (error, coordinates, bbox) {
                            if (error) {
                                console.error(error);
                                return;
                            }

                            mapboxgl.accessToken = 'pk.eyJ1IjoibWlrZWJhbmlhIiwiYSI6ImNsajg5eTVkazEwcWQzcXF6MWFudW83YW8ifQ.ApPsVPuZUJQI2j4q5nQtkw';
                            map = new mapboxgl.Map({
                                container: 'map',
                                style: 'mapbox://styles/mapbox/streets-v11',
                                center: coordinates,
                                zoom: 14
                            });

                            map.on('load', function () {
                                updateMapAndPreview(coordinates, bbox);
                            });
                        });

                    </script>

    </div>
</body>

</html>