generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  firstName    String
  lastName     String
  password     String 
  city         String
  gender       String
  contactNumber String
  profilePicture Bytes?    // Updated to Bytes data type
  createdAt    DateTime  @default(now()) 
  donations    Donation[]
}

model Organization {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  organizationname      String    @unique
  email                 String    @unique
  password              String 
  address               String 
  contactNumber         String    @unique
  secRegistrationNumber String?  @unique
  verificationStatus    String @default("PENDING")
  submittedDocuments    Document[]

  type                  String
  profilePicture        Bytes?    // Updated to Bytes data type
  createdAt             DateTime  @default(now())
}

model Document {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  filename    String
  url         String    
  uploadedBy  String  
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String? 

  createdAt   DateTime  @default(now())
}
 

model DropPoint {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String 
  openingTime   String
  closingTime   String
  description   String 
  manager       Manager?  @relation(fields: [managerId], references: [id])
  managerId     String?   @unique @map("manager_id") @db.ObjectId
  password      String?   // This password is used when assigning a manager to a drop point
  donations       Donation[] 
}


model Manager {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String   
  lastName     String    
  email        String   @unique 
  phoneNumber  String?   
  address      String?  
  createdAt    DateTime @default(now())   
  updatedAt    DateTime @updatedAt    
  dropPoint    DropPoint?
}

model Donation {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  userId                String          @map("user_id") @db.ObjectId
  dropPointId           String          @map("drop_point_id") @db.ObjectId
  pcBrand               String          // e.g., Dell, HP, Lenovo
  pcModel               String          // e.g., Inspiron 15, Pavilion x360
  processor             String          // e.g., Intel i5 10th gen, Ryzen 5 3600
  ramSize               Int             // RAM size in GB, e.g., 8, 16, 32
  storage               String          // e.g., 512GB SSD, 1TB HDD
  graphicCard           String?         // e.g., Nvidia RTX 3070. It can be optional if not all PCs have dedicated graphics.
  condition             String     
  quantity              Int             @default(1)
  createdAt             DateTime        @default(now())
  expectedDateOfArrival DateTime?  
  confirmedByName       String?         // This captures the name of the manager who confirmed the donation.
  confirmedByEmail      String?         // This captures the email of the manager who confirmed the donation.
  images                DonationImage[] // Relation to images
  status                DonationStatus  @default(Pending)  // default value is set to Pending
  user                  User            @relation(fields: [userId], references: [id])
  dropPoint             DropPoint       @relation(fields: [dropPointId], references: [id])
}

model DonationImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  donationId String   @map("donation_id") @db.ObjectId
  imageData  Bytes    // This will hold the actual image data.
  donation   Donation @relation(fields: [donationId], references: [id])
}

enum DonationStatus {
  Pending    // When a user first submits the donation and it's waiting for review
  Verified   // When a manager has reviewed and confirmed the donation's details
  Received   // After the donation has been physically received
  Denied     // If the donation is reviewed and not accepted for any reason
}


