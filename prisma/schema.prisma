generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email        String    @unique
  firstName    String
  lastName     String
  password     String 
  city         String
  gender       String
  contactNumber String
  profilePicture Bytes?    // Updated to Bytes data type
  createdAt    DateTime  @default(now()) 
}

model Organization {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  organizationname      String    @unique
  email                 String    @unique
  password              String 
  address               String 
  contactNumber         String    @unique
  secRegistrationNumber String?  @unique
  verificationStatus    String @default("PENDING")
  submittedDocuments    Document[]

  type                  String
  profilePicture        Bytes?    // Updated to Bytes data type
  donations    Donation[]
  createdAt             DateTime  @default(now())
}

model Document {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  filename    String
  url         String    
  uploadedBy  String  
  organization  Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String? 

  createdAt   DateTime  @default(now())
}

model DropPoint {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String 
  openingTime   String
  closingTime   String
  description   String 
  manager       Manager?  @relation(fields: [managerId], references: [id])
  managerId     String?   @unique @map("manager_id") @db.ObjectId
  password      String?   // This password is used when assigning a manager to a drop point
  donations       Donation[] 
}

model Manager {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String   
  lastName     String    
  email        String   @unique 
  phoneNumber  String?   
  address      String?  
  createdAt    DateTime @default(now())   
  updatedAt    DateTime @updatedAt    
  dropPoint    DropPoint?
}

model Donation {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String           @map("organization_id") @db.ObjectId
  dropPointId   String            @map("drop_point_id") @db.ObjectId
  createdAt     DateTime          @default(now())
  expectedDateOfArrival DateTime?  
  confirmedByName String?
  confirmedByEmail String?
  status        String            @default("Pending")
  
  organization  Organization      @relation(fields: [organizationId], references: [id])
  dropPoint     DropPoint         @relation(fields: [dropPointId], references: [id])
  completeSystems CompletePCSystem[] // Relationship with Complete Systems
  peripherals   PeripheralOrComponent[] // Relationship with Peripherals/Components
}

model CompletePCSystem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  brand     String
  model     String
  processor String?
  ramSize   Int?     // RAM size in GB
  storage   String?  // Optional
  graphicCard String?
  condition String  
  quantity  Int     @default(1)
  
  donation  Donation @relation(fields: [donationId], references: [id])
  donationId String @map("donation_id") @db.ObjectId
}

model PeripheralOrComponent {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  type     String   // e.g., Mouse, Keyboard, RAM, HDD, SSD, Graphic Card, etc.
  brand    String
  model    String
  condition String  
  quantity Int     @default(1)
  
  donation  Donation @relation(fields: [donationId], references: [id])
  donationId String @map("donation_id") @db.ObjectId
}